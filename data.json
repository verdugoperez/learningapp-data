[{
		"id": 0,
		"category": "Swift",
		"content": {
			"id": 0,
			"image": "swift",
			"time": "3 hours",
			"description": "Understand the fundamentals of the Swift programming language.",
			"lessons": [{
					"id": 0,
					"title": "Constants and Variables",
					"video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
					"duration": "17 minutes",
					"explanation": "<div class='section' id='the-basics'><p>Constants and variables must be declared before they're used. You declare constants with the let keyword and variables with the var keyword. Here's an example of how constants and variables can be used to track the number of login attempts a user has made:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>maximumNumberOfLoginAttempts</span> = <span class='m'>10</span></li><li><span class='k'>var</span> <span class='nv'>currentLoginAttempt</span> = <span class='m'>0</span> </li></ol></div></div></div></div><p>You can provide a type annotation when you declare a constant or variable, to be clear about the kind of values the constant or variable can store. Write a type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use.</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>var</span> <span class='nv'>welcomeMessage</span>: <span class='nc'>String</span></li></ol></div></div></div><p>Constant and variable names can contain almost any character, including Unicode characters. Constant and variable names can't contain whitespace characters, mathematical symbols, arrows, private-use Unicode scalar values, or line- and box-drawing characters. Nor can they begin with a number, although numbers may be included elsewhere within the name. Once you've declared a constant or variable of a certain type, you can't declare it again with the same name, or change it to store values of a different type. Nor can you change a constant into a variable or a variable into a constant.</p>"
				},
				{
					"id": 1,
					"title": "Numbers",
					"video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
					"duration": "17 minutes",
					"explanation": "<p>Integers are whole numbers with no fractional component, such as 42 and -23. Integers are either signed (positive, zero, or negative) or unsigned (positive or zero). Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms. These integers follow a naming convention similar to C, in that an 8-bit unsigned integer is of type UInt8, and a 32-bit signed integer is of type Int32. Like all types in Swift, these integer types have capitalized names. In most cases, you don't need to pick a specific size of integer to use in your code. Swift provides an additional integer type, Int, which has the same size as the current platform's native word size:</p><ul class=\"simple\"><li>On a 32-bit platform, <code class=\"docutils literal notranslate\"><span class=\"pre\">Int</span></code> is the same size as <code class=\"docutils literal notranslate\"><span class=\"pre\">Int32</span></code>.</li><li>On a 64-bit platform, <code class=\"docutils literal notranslate\"><span class=\"pre\">Int</span></code> is the same size as <code class=\"docutils literal notranslate\"><span class=\"pre\">Int64</span></code>.</li></ul><p>Unless you need to work with a specific size of integer, always use Int for integer values in your code. This aids code consistency and interoperability. Even on 32-bit platforms, Int can store any value between -2,147,483,648 and 2,147,483,647, and is large enough for many integer ranges.</p><p>Floating-point numbers are numbers with a fractional component, such as 3.14159, 0.1, and -273.15. Floating-point types can represent a much wider range of values than integer types, and can store numbers that are much larger or smaller than can be stored in an Int. Swift provides two signed floating-point number types:</p><ul class=\"simple\"><li><code class=\"docutils literal notranslate\"><span class=\"pre\">Double</span></code> represents a 64-bit floating-point number.</li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">Float</span></code> represents a 32-bit floating-point number.</li></ul>"
				},
				{
					"id": 2,
					"title": "Booleans",
					"video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
					"duration": "17 minutes",
					"explanation": "<p>Swift has a basic Boolean type, called Bool. Boolean values are referred to as logical, because they can only ever be true or false. Swift provides two Boolean constant values, true and false:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>orangesAreOrange</span> = <span class='k'>true</span></li><li><span class='k'>let</span> <span class='nv'>turnipsAreDelicious</span> = <span class='k'>false</span></li></ol></div></div></div><p>The types of orangesAreOrange and turnipsAreDelicious have been inferred as Bool from the fact that they were initialized with Boolean literal values. As with Int and Double above, you don't need to declare constants or variables as Bool if you set them to true or false as soon as you create them. Type inference helps make Swift code more concise and readable when it initializes constants or variables with other values whose type is already known.</p><p>Boolean values are particularly useful when you work with conditional statements such as the if statement:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>if</span> <span class='nv'>turnipsAreDelicious</span> { </li><li>    <span class='nv'>print</span>(<span class='s'>'Mmm, tasty turnips!'</span>) </li><li>} <span class='k'>else</span> {</li><li>    <span class='nv'>print</span>(<span class='s'>'Eww, turnips are horrible.'</span>) </li><li>}</li><li><span class='c'>// Prints 'Eww, turnips are horrible.'</span></li></ol></div></div></div>"
				},
				{
					"id": 3,
					"title": "Optionals",
					"video": "Learn%20Swift%20for%20Beginners%20-%20Ep%2013%20-%20Optionals-uT2IHQpE3ms.mp4",
					"duration": "17 minutes",
					"explanation": "<p>You use optionals in situations where a value may be absent. An optional represents two possibilities: Either there is a value, and you can unwrap the optional to access that value, or there isn't a value at all.</p><p>Here's an example of how optionals can be used to cope with the absence of a value. Swift's Int type has an initializer which tries to convert a String value into an Int value. However, not every string can be converted into an integer. The string \"123\" can be converted into the numeric value 123, but the string 'hello, world' doesn't have an obvious numeric value to convert to.</p><p>The example below uses the initializer to try to convert a String into an Int:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>possibleNumber</span> = <span class='s'>\"123\"</span></li><li><span class='k'>let</span> <span class='nv'>convertedNumber</span> = <span class='nv'>Int</span>(<span class='nv'>possibleNumber</span>) </li><li><span class='c'>// convertedNumber is inferred to be of type 'Int?', or 'optional Int'</span> </li></ol></div></div></div><p>Because the initializer might fail, it returns an optional Int, rather than an Int. An optional Int is written as Int?, not Int. The question mark indicates that the value it contains is optional, meaning that it might contain some Int value, or it might contain no value at all. (It can't contain anything else, such as a Bool value or a String value. It's either an Int, or it's nothing at all.)</p><p>You can use an if statement to find out whether an optional contains a value by comparing the optional against nil. You perform this comparison with the \"equal to\" operator (==) or the \"not equal to\" operator (!=).</p><div class=\"highlight-swift notranslate\"><div class=\"code-sample\"><div class=\"Swift highlight\"><ol class=\"code-lines\"><li><span class=\"k\">if</span> <span class=\"nv\">convertedNumber</span> != <span class=\"k\">nil</span> {</li><li>    <span class=\"nv\">print</span>(<span class=\"s\">\"convertedNumber contains some integer value.\"</span>)</li><li>}</li><li><span class=\"c\">// Prints \"convertedNumber contains some integer value.\"</span></li></ol></div></div></div>"
				},
				{
					"id": 4,
					"title": "Operators",
					"video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
					"duration": "17 minutes",
					"explanation": "<p>An operator is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (+) adds two numbers, as in \"let i = 1 + 2\".</p><p>The assignment operator (a = b) initializes or updates the value of a with the value of b:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>b</span> = <span class='m'>10</span></li><li><span class='k'>var</span> <span class='nv'>a</span> = <span class='m'>5</span></li><li><span class='nv'>a</span> = <span class='nv'>b</span></li><li><span class='c'>// a is now equal to 10</span></li></ol></div></div></div><p>Swift supports the four standard arithmetic operators for all number types:</p><ul class='simple'><li>Addition (<code class='docutils literal notranslate'><span class='pre'>+</span></code>)</li><li>Subtraction (<code class='docutils literal notranslate'><span class='pre'>-</span></code>)</li><li>Multiplication (<code class='docutils literal notranslate'><span class='pre'>*</span></code>)</li><li>Division (<code class='docutils literal notranslate'><span class='pre'>/</span></code>)</li></ul><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='m'>1</span> + <span class='m'>2</span>       <span class='c'>// equals 3</span></li><li><span class='m'>5</span> - <span class='m'>3</span>       <span class='c'>// equals 2</span></li><li><span class='m'>2</span> * <span class='m'>3</span>       <span class='c'>// equals 6</span> </li><li><span class='m'>10.0</span> / <span class='m'>2.5</span>  <span class='c'>// equals 4.0</span></li></ol></div></div></div><p>Swift supports the following comparison operators:</p><ul class='simple'><li>Equal to (<code class='docutils literal notranslate'><span class='pre'>a</span> <span class='pre'>==</span> <span class='pre'>b</span></code>)</li><li>Not equal to (<code class='docutils literal notranslate'><span class='pre'>a</span> <span class='pre'>!=</span> <span class='pre'>b</span></code>)</li><li>Greater than (<code class='docutils literal notranslate'><span class='pre'>a</span> <span class='pre'>&gt;</span> <span class='pre'>b</span></code>)</li><li>Less than (<code class='docutils literal notranslate'><span class='pre'>a</span> <span class='pre'>&lt;</span> <span class='pre'>b</span></code>)</li><li>Greater than or equal to (<code class='docutils literal notranslate'><span class='pre'>a</span> <span class='pre'>&gt;=</span> <span class='pre'>b</span></code>)</li><li>Less than or equal to (<code class='docutils literal notranslate'><span class='pre'>a</span> <span class='pre'>&lt;=</span> <span class='pre'>b</span></code>)</li></ul><p>Each of the comparison operators returns a Bool value to indicate whether or not the statement is true:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='m'>1</span> == <span class='m'>1</span>   <span class='c'>// true because 1 is equal to 1</span></li><li><span class='m'>2</span> != <span class='m'>1</span>   <span class='c'>// true because 2 is not equal to 1</span></li><li><span class='m'>2</span> &gt; <span class='m'>1</span>    <span class='c'>// true because 2 is greater than 1</span></li><li><span class='m'>1</span> &lt; <span class='m'>2</span>    <span class='c'>// true because 1 is less than 2</span> </li><li><span class='m'>1</span> &gt;= <span class='m'>1</span>   <span class='c'>// true because 1 is greater than or equal to 1</span></li><li><span class='m'>2</span> &lt;= <span class='m'>1</span>   <span class='c'>// false because 2 is not less than or equal to 1</span></li></ol></div></div></div>"
				},
				{
					"id": 5,
					"title": "Strings",
					"video": "Learn%20Swift%20for%20Beginners%20Lesson%201%20-%20Variables%20(Swift%205%20compatible)-2OZ07fklur8.mp4",
					"duration": "17 minutes",
					"explanation": "<p>A string is a series of characters, such as 'hello, world' or 'albatross'. Swift strings are represented by the String type. You can include predefined String values within your code as string literals. A string literal is a sequence of characters surrounded by double quotation marks (\"). Use a string literal as an initial value for a constant or variable:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>someString</span> = <span class='s'>\"Some string literal value\"</span></li></ol></div></div></div>"
				},
				{
					"id": 6,
					"title": "Control Flow",
					"video": "Learn%20Swift%20for%20Beginners%20-%20Ep%205%20-%20Loops%20Part%201-vxyrLbmm9Oo.mp4",
					"duration": "17 minutes",
					"explanation": "<p>Swift provides a variety of control flow statements. These include while loops to perform a task multiple times; if, guard, and switch statements to execute different branches of code based on certain conditions; and statements such as break and continue to transfer the flow of execution to another point in your code.</p><p>You use the for-in loop to iterate over a sequence, such as items in an array, ranges of numbers, or characters in a string.</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>names</span> = [<span class='s'>\"Anna\"</span>, <span class='s'>\"Alex\"</span>, <span class='s'>\"Brian\"</span>, <span class='s'>\"Jack\"</span>]</li><li><span class='k'>for</span> <span class='nv'>name</span> <span class='k'>in</span> <span class='nv'>names</span> {</li><li>    <span class='nv'>print</span>(<span class='s'>'Hello, </span>\\<span class='p'>(</span><span class='nv'>name</span><span class='p'>)</span><span class='s'>!'</span>)</li><li>}</li><li><span class='c'>// Hello, Anna!</span> </li><li><span class='c'>// Hello, Alex!</span></li><li><span class='c'>// Hello, Brian!</span></li><li><span class='c'>// Hello, Jack!</span></li></ol></div></div></div>"
				},
				{
					"id": 7,
					"title": "Functions",
					"video": "Learn%20Swift%20for%20Beginners%20-%20Ep%207%20-%20Functions%20Part%201-2kwyQ5w00Uc.mp4",
					"duration": "17 minutes",
					"explanation": "<p>Functions are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to \"call\" the function to perform its task when needed.</p><p>When you define a function, you can optionally define one or more named, typed values that the function takes as input, known as parameters. You can also optionally define a type of value that the function will pass back as output when it is done, known as its return type.</p><p>Every function has a function name, which describes the task that the function performs. To use a function, you \"call\" that function with its name and pass it input values (known as arguments) that match the types of the function's parameters. A function's arguments must always be provided in the same order as the function's parameter list.</p><p>The function in the example below is called greet(person:), because that's what it does—it takes a person's name as input and returns a greeting for that person. To accomplish this, you define one input parameter - a String value called person - and a return type of String, which will contain a greeting for that person:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>func</span> <span class='nv'>greet</span>(<span class='nv'>person</span>: <span class='nc'>String</span>) -&gt; <span class='nc'>String</span> {</li><li>    <span class='k'>let</span> <span class='nv'>greeting</span> = <span class='s'>\"Hello, \"</span> + <span class='nv'>person</span> + <span class='s'>\"!\"</span></li><li>    <span class='k'>return</span> <span class='nv'>greeting</span></li><li>}</li></ol></div></div></div><p>All of this information is rolled up into the function’s definition, which is prefixed with the func keyword. You indicate the function’s return type with the return arrow -> (a hyphen followed by a right angle bracket), which is followed by the name of the type to return.</p>"
				},
				{
					"id": 8,
					"title": "Structures and Classes",
					"video": "Learn%20Swift%20for%20Beginners%20-%20Ep%209%20-%20Classes%20Part%201-ZDzdz52tex4.mp4",
					"duration": "17 minutes",
					"explanation": "<p>Structures and classes are general-purpose, flexible constructs that become the building blocks of your program's code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions. Structures and classes in Swift have many things in common. Both can:</p><ul class='simple'><li>Define properties to store values</li><li>Define methods to provide functionality</li><li>Define subscripts to provide access to their values using subscript syntax</li><li>Define initializers to set up their initial state</li><li>Be extended to expand their functionality beyond a default implementation</li><li>Conform to protocols to provide standard functionality of a certain kind</li></ul><p>Classes have additional capabilities that structures don't have:</p><ul class=\"simple\"><li>Inheritance enables one class to inherit the characteristics of another.</li><li>Type casting enables you to check and interpret the type of a class instance at runtime.</li><li>Deinitializers enable an instance of a class to free up any resources it has assigned.</li><li>Reference counting allows more than one reference to a class instance.</li> </ul><p>Structures and classes have a similar definition syntax. You introduce structures with the struct keyword and classes with the class keyword. Both place their entire definition within a pair of braces. Here's an example of a structure definition and a class definition:</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>struct</span> <span class='nv'>Resolution</span> {</li><li>    <span class='k'>var</span> <span class='nv'>width</span> = <span class='m'>0</span></li><li>    <span class='k'>var</span> <span class='nv'>height</span> = <span class='m'>0</span></li><li>}</li><li><span class='k'>class</span> <span class='nv'>VideoMode</span> {</li><li>    <span class='k'>var</span> <span class='nv'>resolution</span> = <span class='nv'>Resolution</span>() </li><li>    <span class='k'>var</span> <span class='nv'>interlaced</span> = <span class='k'>false</span> </li><li>    <span class='k'>var</span> <span class='nv'>frameRate</span> = <span class='m'>0.0</span> </li><li>    <span class='k'>var</span> <span class='nv'>name</span>: <span class='nc'>String</span>?</li><li>}</li></ol></div></div></div>"
				},
				{
					"id": 9,
					"title": "Error Handling",
					"video": "Try%20_%20Catch%20Basics%20-%20Swift%20Error%20Handling%20-%20Xcode%2010,%20Swift%204-9hb80LAwf5c.mp4",
					"duration": "17 minutes",
					"explanation": "<p>Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.</p><p>Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can't continue. You use a throw statement to throw an error.</p><p>When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure. You use a do-catch statement to handle errors by running a block of code. If an error is thrown by the code in the do clause, it is matched against the catch clauses to determine which one of them can handle the error.</p><div class='syntax-outline highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>do</span> {</li><li>    <span class='k'>try</span> <span class='gi'>expression</span></li><li>    <span class='gi'>statements</span></li><li>} <span class='k'>catch</span> <span class='gi'>pattern 1</span> {</li><li>    <span class='gi'>statements</span> </li><li>} <span class='k'>catch</span> <span class='gi'>pattern 2</span> <span class='k'>where</span> <span class='gi'>condition</span> {</li><li>    <span class='gi'>statements</span></li><li>} <span class='k'>catch</span> <span class='gi'>pattern 3</span>, <span class='gi'>pattern 4</span> <span class='k'>where</span> <span class='gi'>condition</span> {</li><li>    <span class='gi'>statements</span></li><li>} <span class='k'>catch</span> {</li><li>    <span class='gi'>statements</span></li><li>}</li></ol></div></div></div>"
				}
			]
		},
		"test": {
			"id": 0,
			"image": "testSwift",
			"time": "30 minutes",
			"description": "Gear up and put your Swift knowledge to the test.",
			"questions": [{
					"id": 0,
					"content": "<p>What keyword is used to define a constant in Swift?</p>",
					"correctIndex": 2,
					"answers": [
						"const",
						"var",
						"let",
						"const var"
					]
				},
				{
					"id": 1,
					"content": "<p>How large is an Int?</p>",
					"correctIndex": 3,
					"answers": [
						"16 bits",
						"32 bits",
						"64 bits",
						"It depends on the platform"
					]
				},
				{
					"id": 2,
					"content": "<p>What is the value of <span class='pre'>b</span> in the following expression?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>a</span> = <span class='k'>false</span></li><li><span class='k'>let</span> <span class='nv'>b</span> = <span class='k'>false</span> || ( <span class='k'>true</span> && !<span class='k'>a</span> )</li></ol></div></div></div>",
					"correctIndex": 0,
					"answers": [
						"true",
						"false"
					]
				},
				{
					"id": 3,
					"content": "<p>What is the type and value of str in the following expression?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>num</span> = <span class='m'>12.0</span></li><li><span class='k'>let</span> <span class='nv'>str</span> = <span class='nv'>String</span>(<span class='nv'>num</span>)</li></ol></div></div></div>",
					"correctIndex": 1,
					"answers": [
						"Type: String, Value: \"12.0\"",
						"Type: String?, Value: \"12.0\"",
						"Type: String, Value: \"12\"",
						"Type: String?, Value: nil"
					]
				},
				{
					"id": 4,
					"content": "<p>What operator takes two numbers, and returns a boolean?</p>",
					"correctIndex": 4,
					"answers": [
						"<",
						">",
						"==",
						"!=",
						"all of the above"
					]
				},
				{
					"id": 5,
					"content": "<p>What does the following code output?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>let</span> <span class='nv'>total</span> = <span class='m'>0</span></li><li><span class='k'>let</span> <span class='nv'>nums</span> = [<span class='m'>0</span>, <span class='m'>1</span>, <span class='m'>2</span>, <span class='m'>3</span>]</li><li><span class='k'>for</span> <span class='nv'>num</span> <span class='k'>in</span> <span class='nv'>nums</span> {</li><li><span class='nv'>total</span> += <span class='nv'>num</span></span></li><li>}</li>",
					"correctIndex": 2,
					"answers": [
						"0",
						"3",
						"6",
						"10"
					]
				},
				{
					"id": 6,
					"content": "<p>What is the following function's return type?</p><div class='highlight-swift notranslate'><div class='code-sample'><div class='Swift highlight'><ol class='code-lines'><li><span class='k'>func</span> <span class='nv'>foo</span>(<span class='nv'>bar</span>: <span class='nc'>String</span>, <span class='nv'>bizz</span>: <span class='nc'>Bool</span>) -&gt; <span class='nc'>Int</span> {...}</li></ol></div></div></div>",
					"correctIndex": 2,
					"answers": [
						"String",
						"Bool",
						"Int",
						"It doesn't have a return type"
					]
				},
				{
					"id": 7,
					"content": "Structures can't:",
					"correctIndex": 3,
					"answers": [
						"Define properties to store values",
						"Define initializers to set up their initial state",
						"Conform to protocols to provide standard functionality of a certain kind",
						"Inherit the characteristics of another structure"
					]
				},
				{
					"id": 8,
					"content": "Why might you throw an error?",
					"correctIndex": 1,
					"answers": [
						"The code has become too complicated to continue writing",
						"Something unexpected happened and the normal flow of execution can't continue",
						"To pass data to a caller method"
					]
				},
				{
					"id": 9,
					"content": "How can you deal with an error?",
					"correctIndex": 3,
					"answers": [
						"By correcting the problem",
						"By trying an alternative approach",
						"By informing the user of the failure",
						"All of the above"
					]
				}
			]
		}
	},
	{
		"id": 1,
		"category": "SwiftUI",
		"content": {
			"id": 0,
			"image": "swiftUI",
			"time": "2 hours",
			"description": "Discover the innovative and simple way to build apps on Apple platforms, especially iOS.",
			"lessons": [{
					"id": 0,
					"title": "App Structure and Behaviour",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>Declare your app by creating a structure that conforms to the App protocol and add one or more scenes to it. You can use built-in scenes, like WindowGroup, or you can compose custom scenes that conform to the Scene protocol. Scenes contain the view hierarchies that define the user interface of your app, and have a life cycle that the system manages.</p>"
				},
				{
					"id": 1,
					"title": "Views and Controls",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>Views and controls are the visual building blocks of your app's user interface. Use them to present your app's content onscreen. Views represent text, images, shapes, custom drawings, and compositions of any and all of these together. Controls enable user interaction with consistent APIs that adapt to their platform and context. Combine views using containers that specify their visual relationships and hierarchy. Use methods called modifiers to customize the display, behavior, and interactivity of built-in views and those you create for your app.</p>"
				},
				{
					"id": 2,
					"title": "View Layout and Presentation",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>Use stacks and lists to lay out the views of your user interface. You can combine static views with views that are dynamically generated from collections of data. All container views update and adjust the positions of their children in response to changes in content or interface dimensions.</p>"
				},
				{
					"id": 3,
					"title": "Drawing and Animation",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>Use drawing tools to combine shapes or define custom paths for shapes of your own design. Apply styles from environment-aware colors to rich gradients to the foreground, background, and outline of your shapes.</p>"
				},
				{
					"id": 4,
					"title": "Framework Integration",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>Integrate SwiftUI with your app's existing content using:</p><ul><li><p>Hosting controllers to add AppKit, UIKit, or WatchKit views and view controllers to your SwiftUI interfaces. A hosting controller wraps the designated view or view controller and facilitates communication between the wrapped object and your SwiftUI views.</p></li><li><p>Representable objects to add SwiftUI views into your existing AppKit, UIKit, or WatchKit interfaces. A representable object wraps a set of SwiftUI views in a form that you can then add to your storyboard-based app.</p></li></ul>"
				},
				{
					"id": 5,
					"title": "State and Data Flow",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>SwiftUI offers a declarative approach to user interface design. As you compose a hierarchy of views, you also indicate data dependencies for the views. When the data changes, either due to an external event or because of an action taken by the user, SwiftUI automatically updates the affected parts of the interface. As a result, the framework automatically performs most of the work traditionally done by view controllers.</p><p>The framework provides tools, like state variables and bindings, for connecting your app's data to the user interface. These tools help you maintain a single source of truth for every piece of data in your app, in part by reducing the amount of glue logic you write.</p>"
				},
				{
					"id": 6,
					"title": "Property Wrappers",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>SwiftUI implements many data management types, like State and Binding, as Swift property wrappers. Apply a property wrapper by adding an attribute with the wrapper's name to a property's declaration. The property gains the behavior specified by the wrapper. The state and data flow property wrappers in SwiftUI watch for changes in your data, and automatically update affected views as needed. When you refer directly to the property in your code, you access the wrapped value. Alternatively, you can access a property wrapper's projected value by prefixing the property name with the dollar sign ($). SwiftUI state and data flow property wrappers always project a Binding, which is a two-way connection to the wrapped value, allowing another view to access and mutate a single source of truth.</p>"
				},
				{
					"id": 7,
					"title": "Gestures",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>Respond to taps and gestures by adding gesture modifiers to your views. Create custom gestures from individual gestures using the simultaneously(with:), sequenced(before:), or exclusively(before:) modifiers, or combine gestures with keyboard modifiers using the modifiers(_:) modifier.</p>"
				},
				{
					"id": 8,
					"title": "Previews",
					"video": "SwiftUI%20trimmed.mp4",
					"duration": "15 minutes",
					"explanation": "<p>Generate dynamic, interactive previews of your custom views. Xcode statically discovers types that conform to the PreviewProvider protocol in your app, and generates previews for each provider it discovers.</p>"
				}
			]
		},
		"test": {
			"id": 0,
			"image": "swiftUI",
			"time": "30 minutes",
			"description": "Test your knowledge of SwiftUI.",
			"questions": [{
					"id": 0,
					"content": "<p>Every SwiftUI app has exactly one scene to which contains a view hierarchy.</p>",
					"correctIndex": 1,
					"answers": [
						"true",
						"false"
					]
				},
				{
					"id": 1,
					"content": "<p>How can you customize the display and behaviour of a view in SwiftUI?</p>",
					"correctIndex": 2,
					"answers": [
						"Change it in the storyboard",
						"Conform it to the appropriate delegate protocol",
						"Using modifiers",
						"You can't"
					]
				},
				{
					"id": 2,
					"content": "<p>Which of the following allows you to display a table?</p>",
					"correctIndex": 3,
					"answers": [
						"VStack",
						"HStack",
						"ZStack",
						"List"
					]
				},
				{
					"id": 3,
					"content": "<p>You can define custom paths to create shapes in SwiftUI.</p>",
					"correctIndex": 0,
					"answers": [
						"true",
						"false"
					]
				},
				{
					"id": 4,
					"content": "<p>Select the best answer.</p>",
					"correctIndex": 3,
					"answers": [
						"You can add SwiftUI views to a storyboard-based app using hosting controllers",
						"You can add UIKit views to a SwiftUI project using representable objects",
						"SwiftUI and UIKit are separate, and shouldn't be integrated",
						"Answers 1 and 2"
					]
				},
				{
					"id": 5,
					"content": "<p>In SwiftUI, interfaces are created:</p>",
					"correctIndex": 2,
					"answers": [
						"Procedurally",
						"Dynamically",
						"Declaratively",
						"Eccentrically"
					]
				},
				{
					"id": 6,
					"content": "<p>Prefixing a property wrapped property with $ will access its",
					"correctIndex": 1,
					"answers": [
						"Wrapped value",
						"Projected value",
						"Financial value",
						"That's invalid syntax"
					]
				}
			]
		}
	}


]
